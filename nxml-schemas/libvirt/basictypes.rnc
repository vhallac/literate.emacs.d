# network-related definitions used in multiple grammars

# Our unsignedInt doesn"t allow a leading "+" in its lexical form
unsignedInt = xsd:unsignedInt { pattern = "[0-9]+" }
unsignedLong = xsd:unsignedLong { pattern = "[0-9]+" }
hexuint = xsd:string { pattern = "(0x)?[0-9a-f]+" }
positiveInteger = xsd:positiveInteger { pattern = "[0-9]+" }
octalMode = xsd:unsignedInt { pattern = "[0-7]+" }
uint8range =
  xsd:string { pattern = "0x[0-9a-fA-F]{1,2}" }
  | xsd:int { minInclusive = "0" maxInclusive = "255" }
uint24range =
  xsd:string { pattern = "0x[0-9a-fA-F]{1,6}" }
  | xsd:int { minInclusive = "0" maxInclusive = "16777215" }
UUID =
  xsd:string { pattern = "[a-fA-F0-9]{32}" }
  | xsd:string {
      pattern = "[a-fA-F0-9]{8}\-([a-fA-F0-9]{4}\-){3}[a-fA-F0-9]{12}"
    }
pciaddress =
  attribute domain { pciDomain }?,
  attribute bus { pciBus },
  attribute slot { pciSlot },
  attribute function { pciFunc },
  attribute multifunction { virOnOff }?
# a 6 byte MAC address in ASCII-hex format, eg "12:34:56:78:9A:BC"

# The lowest bit of the 1st byte is the "multicast" bit. a

# uniMacAddr requires that bit to be 0, and a multiMacAddr

# requires it to be 1. Plain macAddr will accept either.

# Currently there is no use of multiMacAddr in libvirt, it

# is included here for documentation/comparison purposes.
uniMacAddr =
  xsd:string {
    pattern = "[a-fA-F0-9][02468aAcCeE](:[a-fA-F0-9]{2}){5}"
  }
multiMacAddr =
  xsd:string {
    pattern = "[a-fA-F0-9][13579bBdDfF](:[a-fA-F0-9]{2}){5}"
  }
macAddr = xsd:string { pattern = "[a-fA-F0-9]{2}(:[a-fA-F0-9]{2}){5}" }
# ====================================================================

# The duid is a unique identifier used in DHCPv6 to identity an

# interface on a device (system).  The duid is often used by servers

# such as dnsmasq to assign a specific IP address (and optionally a

# name to an interface.  The applicable standards are RFC3315 and

# RFC6355.  These standards actually require the duid to be fixed for

# the hardward device and applicable to all network interfaces on

# that device.  It is not clear that any software currently enforces

# this requirement although it could be implemented manually.

# ====================================================================

# There are currently four types of duids defined:

# type 1, duid-LLT, link-layer (MAC) plus 32 bit time when the

# duid-LLT was created in seconds from January 1, 2000

# type 2, duid-EN, 32 bit "enterprise number" followed by a

# variable length unique identifier.

# type 3, duid-LL, link-layer (MAC)

# type 4, duid-UUID, a 128 bit UUID (16 bytes)

# RFC3315 states that the maximum length of a duid is 128 bytes plus

# the 16 bit type field.  Often, the machine type is "1" which is the

# number assigned to ethernet.
duidLLT =
  xsd:string {
    # 0======| type======| 0======| machine type======| time================| link-layer============|
    pattern =
      "[0]{1,2}:[0]{0,1}[1]:[0]{1,2}:[0]{0,1}[a-fA-F1-9](:[a-fA-F0-9]{1,2}){4}(:[a-fA-F0-9]{1,2}){6,8}"
  }
duidEN =
  xsd:string {
    # 0======| type======| Enterprise number===| unique id ==============|
    pattern =
      "[0]{1,2}:[0]{0,1}[2](:[a-fA-F0-9]{1,2}){4}(:[a-fA-F0-9]{1,2}){1,124}"
  }
duidLL =
  xsd:string {
    # 0======| type======| 0======| machine type======| link-layer============|
    pattern =
      "[0]{1,2}:[0]{0,1}[3]:[0]{1,2}:[0]{0,1}[a-fA-F1-9](:[a-fA-F0-9]{1,2}){6,8}"
  }
duidUUID =
  xsd:string {
    # 0======| type======| UUID=================|
    pattern = "[0]{1,2}:[0]{0,1}[4](:[a-fA-F0-9]{1,2}){16}"
  }
DUID = duidLLT | duidEN | duidLL | duidUUID
# ======================================================================

# An ipv4 "dotted quad" address
ipv4Addr =
  xsd:string {
    pattern =
      "(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([1-9][0-9])|([0-9]))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([1-9][0-9])|([0-9]))"
  }
# Based on http://blog.mes-stats.fr/2008/10/09/regex-ipv4-et-ipv6
ipv6Addr =
  xsd:string {
    # To understand this better, take apart the toplevel "|"s
    pattern =
      "(([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([1-9][0-9])|([0-9]))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([1-9][0-9])|([0-9])))|(([0-9A-Fa-f]{1,4}:){0,5}:(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([1-9][0-9])|([0-9]))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([1-9][0-9])|([0-9])))|(::([0-9A-Fa-f]{1,4}:){0,5}(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([1-9][0-9])|([0-9]))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([1-9][0-9])|([0-9])))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:)|(::)"
  }
ipAddr = ipv4Addr | ipv6Addr
ipv4Prefix = xsd:unsignedInt { maxInclusive = "32" }
ipv6Prefix = xsd:unsignedInt { maxInclusive = "128" }
ipPrefix = ipv4Prefix | ipv6Prefix
genericName = xsd:string { pattern = "[a-zA-Z0-9_\+\-]+" }
dnsName = xsd:string { pattern = "[a-zA-Z0-9\.\-]+" }
deviceName = xsd:string { pattern = "[a-zA-Z0-9_\.\-\\:/]+" }
filePath = xsd:string { pattern = """[a-zA-Z0-9_\.\+\-\\&"'<>/%]+""" }
dirPath = xsd:string { pattern = """[a-zA-Z0-9_\.\+\-\\&"'<>/%]+""" }
absFilePath =
  xsd:string { pattern = """/[a-zA-Z0-9_\.\+\-\\&"'<>/%,:]+""" }
absDirPath =
  xsd:string { pattern = """/[a-zA-Z0-9_\.\+\-\\&"'<>/%]*""" }
unit =
  xsd:string {
    pattern = "([bB]([yY][tT][eE][sS]?)?)|([kKmMgGtTpPeE]([iI]?[bB])?)"
  }
scaledInteger =
  attribute unit { unit }?,
  unsignedLong
pciDomain = xsd:string { pattern = "(0x)?[0-9a-fA-F]{1,4}" }
pciBus = xsd:string { pattern = "(0x)?[0-9a-fA-F]{1,2}" }
pciSlot = xsd:string { pattern = "(0x)?[0-1]?[0-9a-fA-F]" }
pciFunc = xsd:string { pattern = "(0x)?[0-7]" }
wwn = xsd:string { pattern = "(0x)?[0-9a-fA-F]{16}" }
cpuset =
  xsd:string {
    pattern =
      "([0-9]+(-[0-9]+)?|\^[0-9]+)(,([0-9]+(-[0-9]+)?|\^[0-9]+))*"
  }
volName =
  # directory pools allow almost any file name as a volume name
  (xsd:string { pattern = "[^/]+" } - (("." | "..")))
archnames =
  "aarch64"
  | "alpha"
  | "armv7l"
  | "cris"
  | "i686"
  | "ia64"
  | "lm32"
  | "m68k"
  | "microblaze"
  | "microblazeel"
  | "mips"
  | "mipsel"
  | "mips64"
  | "mips64el"
  | "openrisc"
  | "parisc"
  | "parisc64"
  | "ppc"
  | "ppc64"
  | "ppc64le"
  | "ppcemb"
  | "s390"
  | "s390x"
  | "sh4"
  | "sh4eb"
  | "sparc"
  | "sparc64"
  | "unicore32"
  | "x86_64"
  | "xtensa"
  | "xtensaeb"
PortNumber = xsd:int { minInclusive = "-1" maxInclusive = "65535" }
sourceinfoadapter =
  element adapter {
    ((# To keep back-compat, 'type' is not mandatory for
      # scsi_host adapter
      attribute type { "scsi_host" }?,
      (attribute name { text }
       | (element parentaddr {
            attribute unique_id { positiveInteger }?,
            element address { pciaddress }
          })))
     | (attribute type { "fc_host" },
        attribute parent { text }?,
        attribute managed { virYesNo }?,
        attribute wwnn { wwn },
        attribute wwpn { wwn })),
    empty
  }
isaaddress =
  attribute iobase {
    xsd:string { pattern = "0x[a-fA-F0-9]{1,4}" }
  }?,
  attribute irq {
    xsd:string { pattern = "0x[a-fA-F0-9]" }
  }?
link-speed-state =
  element link {
    attribute speed { unsignedInt }?,
    attribute state {
      "unknown"
      | "notpresent"
      | "down"
      | "lowerlayerdown"
      | "testing"
      | "dormant"
      | "up"
    }?
  }?
virYesNo = "yes" | "no"
virOnOff = "on" | "off"
